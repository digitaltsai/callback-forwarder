{"version":3,"sources":["../../server/CallbackServer.js"],"names":[],"mappings":"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","file":"CallbackServer.js","sourcesContent":["'use strict';\nrequire('source-map-support').install();\n\nconst http = require('http');\nconst url = require('url');\n\nconst CallbackClient = require('./CallbackClient');\nconst WebSocketHandler = require('./WebSocketHandler');\n\nconst logger = require('../common/Logger')('CallbackServer');\n\nclass CallbackServer {\n  constructor(config) {\n    this.config = config;\n    this.paths = {};\n    this.secret = config.sharedSecret;\n\n    const server = http.createServer();\n    this.server = server;\n\n    const wsh = new WebSocketHandler(this); // eslint-disable-line\n\n    server.on('request', (req, res) => {\n      const parsedUrl = url.parse(req.url);\n\n      if (parsedUrl.path === '/server/health') {\n        res.writeHead(200, { 'Content-Type': 'application/json' });\n        res.end(JSON.stringify({\n          pathCount: this.paths.length,\n        }));\n        return;\n      }\n\n      if (!this.paths[parsedUrl.path]) {\n        logger.debug('No matching path');\n        res.writeHead(404);\n        res.end();\n        return;\n      }\n\n      let body = [];\n      req.on('data', (chunk) => {\n        body.push(chunk);\n      }).on('end', () => {\n        body = Buffer.concat(body).toString();\n        // at this point, `body` has the entire request body stored in it as a string\n        const client = this.paths[parsedUrl.path];\n\n        if (!client) {\n          logger.debug('Lost connection to client before request completed');\n          return;\n        }\n\n        const request = {\n          method: req.method,\n          headers: req.headers,\n          uri: req.url,\n          body,\n        };\n\n        const path = url.parse(req.url).path;\n\n        logger.debug('Relaying request', request);\n        client.askClientForResponse(path, request)\n          .then((clientRes) => {\n            logger.debug('Relaying response', clientRes);\n            res.writeHead(clientRes.status, clientRes.headers);\n            res.end(clientRes.body);\n          })\n          .catch((err) => {\n            logger.error(err);\n            res.writeHead(500, { 'Content-Type': 'text/plain' });\n            res.end(err.message);\n          });\n      });\n    });\n  }\n\n  start() {\n    return new Promise((resolve, reject) => {\n      this.server.listen(this.config.port, this.config.hostname, (err) => {\n        if (err) {\n          logger.error(err);\n          reject(err);\n          return;\n        }\n        logger.debug(`Server started on ${this.config.hostname}:${this.config.port}`); // eslint-disable-line\n        resolve();\n      });\n    });\n  }\n\n  stop() {\n    this.server.close();\n  }\n\n  createClient(ws) {\n    const callbackClient = new CallbackClient(this, ws);\n    logger.debug(`Client created ${callbackClient.id}`);\n    return callbackClient;\n  }\n\n  createCallbackUrl(path, client) {\n    return new Promise((resolve, reject) => {\n      if (this.paths[path]) {\n        const err = new Error('already has a path');\n        logger.error(err);\n        reject(err);\n        return;\n      }\n      logger.debug(`Created callback url ${path}`);\n      this.paths[path] = client;\n      resolve();\n    });\n  }\n\n  deleteCallbackUrl(path) {\n    delete this.paths[path];\n  }\n\n  deleteClient(callbackClient) {\n    logger.debug(`Deleting client ${callbackClient.id}`);\n    for (const path of Object.keys(callbackClient.paths)) {\n      delete this.paths[path];\n    }\n  }\n}\n\nmodule.exports = CallbackServer;\n"]}